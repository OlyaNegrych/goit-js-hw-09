{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAUC,SAASC,cAAc,SACjCC,EAAWF,SAASC,cAAc,kBAClCE,EAAUH,SAASC,cAAc,iBACjCG,EAAYJ,SAASC,cAAc,mBACrCI,EAAa,KAQjB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCN,EAAaO,aAAY,WACvB,IAAMC,EAAYX,EAASY,MAAQX,EAAQW,MACrCC,EAAUR,EAAW,EAE3B,GAAIA,IAAaH,EAAUU,MAK3B,OAAO,IAAIE,SAAQ,SAACC,EAASC,GACvBT,GACFQ,EAAQ,CAACE,SAAUJ,EAASP,MAAOK,IAEnCK,EAAO,CAAEC,SAAUJ,EAASP,MAAOK,IAErCN,GAAY,IACXC,GAXDY,cAAcf,MAbpBN,EAAQsB,iBAAiB,UAAU,SAAAC,GACjCA,EAAMC,iBACNjB,EAJa,EAIWJ,EAASY,UA0BnCR,EAAc,EAAG,KAAKkB,MAEtB,SAAmBC,G,IAAEC,EAAFD,EAAEN,SAAUX,EAAZiB,EAAYjB,MAC7BmB,EAAA9B,GAAS+B,OAAOC,QAAQ,uBAAwCC,OAAfJ,EAAS,QAAYI,OAANtB,EAAM,UAHlCuB,OAMtC,SAAiBN,G,IAAEO,EAAFP,EAAEN,SAAUX,EAAZiB,EAAYjB,MAC3BmB,EAAA9B,GAAS+B,OAAOK,QAAQ,sBAAuCH,OAAfE,EAAS,QAAYF,OAANtB,EAAM,U","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\nlet intervalId = null;\nlet position = 1;\n\nformRef.addEventListener('submit', event => {\n  event.preventDefault();\n  createPromise(position, delayRef.value);\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  intervalId = setInterval(() => {\n    const delayNumb = delayRef.value + stepRef.value;\n    const counter = position + 1;\n\n    if (position === amountRef.value) {\n      clearInterval(intervalId);\n      return;\n    }\n\n    return new Promise((resolve, reject) => {\n      if (shouldResolve) {\n        resolve({position: counter, delay: delayNumb});\n      } \n        reject({ position: counter, delay: delayNumb });\n  \n      position += 1;\n    }, delay);\n  });\n}\n\ncreatePromise(2, 500).then(onSuccess).catch(onError);\n\nfunction onSuccess({ position, delay }) {\n  Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onError({ position, delay }) {\n  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n}\n\n// const makeOrder = () => {\n//   const DELAY = 1000;\n\n//   return new Promise((resolve, reject) => {\n//     const passed = Math.random() > 0.5;\n\n//     setTimeout(() => {\n//       if (passed) {\n//         resolve({ position: 1, delay: DELAY});\n//       }\n//       reject({ position: 2, delay: DELAY});\n//     }, DELAY);\n//   })\n// }\n\n// makeOrder().then(onSuccess).catch(onError);\n\n// function onSuccess({ position, delay }) {\n//   Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// }\n\n// function onError({ position, delay }) {\n//  Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// }\n\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$delayRef","$ce04d3a99e08e73b$var$stepRef","$ce04d3a99e08e73b$var$amountRef","$ce04d3a99e08e73b$var$intervalId","$ce04d3a99e08e73b$var$createPromise","position1","delay","shouldResolve","Math","random","setInterval","delayNumb","value","counter","Promise","resolve","reject","position","clearInterval","addEventListener","event","preventDefault","then","param","position2","$parcel$interopDefault","Notify","success","concat","catch","position3","failure"],"version":3,"file":"03-promises.601a908f.js.map"}